//@version=4
_maxPyramiding = 0
strategy("STRG-Kijun", overlay=true, pyramiding = _maxPyramiding)
_year = input(2020, minval=1, title="Look back since(yr)")
_contract = input(1, minval=1, title="Contract size")
//BEGINING OF COPY KIJUN ARROW
conversionPeriods = input(9, minval=1, title="Conversion Line Periods"),
basePeriodsK = input(26, minval=1, title="Base Line Periods")
getMidPoint(_len, __offset) => MidPointOffset = avg(lowest(_len)[__offset], highest(_len)[__offset])
Kijun = getMidPoint(basePeriodsK, 0)
//MODIFIED FROM OFFICIAL ICHIMOKU PINE SCRIPT
laggingSpan2Periods = input(52, minval=1, title="Lagging Span 2 Periods"),
displacement = input(26, minval=1, title="Displacement")
donchian(len) => avg(lowest(len), highest(len))
conversionLine = donchian(conversionPeriods)
baseLine = donchian(basePeriodsK)
leadLine1 = avg(conversionLine, baseLine)
leadLine2 = donchian(laggingSpan2Periods)
//plot(conversionLine,    color=color.fuchsia,  linewidth = 2, transp = 0, title="Conversion Line")
plot(baseLine,          color=color.blue,     linewidth = 4, transp = 0, title="Base Line")
//plot(close, offset = -displacement, color=color.black, title="Lagging Span", style = plot.style_circles, transp = 0, linewidth = 3) 
//p1 = plot(leadLine1, offset = displacement, color=color.green, title="Lead 1")
//p2 = plot(leadLine2, offset = displacement, color=color.red, title="Lead 2")
//fill(p1, p2, color = leadLine1 > leadLine2 ? color.green : color.red)
//END OF OFFICIAL ICHIMOKU PINE SCRIPT
_curArrowDirection = if (Kijun[0] - Kijun[1] > 0)
    1
else if (Kijun[0] - Kijun[1] < 0)
    -1
var _existingArrowDirection = 0
_direction = 0
if (_curArrowDirection != _existingArrowDirection)
    _direction := _curArrowDirection
    _existingArrowDirection := _curArrowDirection
//plotarrow(_direction, colorup=color.black, colordown=color.black, transp=0, minheight = 15, maxheight = 15)
//END OF COPY KIJUN ARROW

KijunOffset = getMidPoint(basePeriodsK, 1)
_atrNumStop = 2
_atrNumProfit = 4
_atr = atr(14)

longCondition = (Kijun > KijunOffset) and (year >= _year) // and (strategy.position_size <= _maxPyramiding)
exitCondition = (_existingArrowDirection == 1) and (year >= _year)
if (longCondition)
    strategy.entry("L", strategy.long, _contract)
    __stopLoss    = close - _atr * _atrNumStop
    __takeProfit  = close + _atr * _atrNumProfit
    strategy.exit("Exit L", "L", stop = __stopLoss, limit = __takeProfit)//
//if (exitCondition)
shortCondition = (Kijun < KijunOffset) and (year >= _year)// and (strategy.position_size <= _maxPyramiding)
if (shortCondition)
    __stopLoss    = close + _atr * _atrNumStop
    __takeProfit  = close - _atr * _atrNumProfit
    strategy.entry("S", strategy.short, _contract)
    strategy.exit("Exit S", "S", stop = __stopLoss, limit = __takeProfit)//
